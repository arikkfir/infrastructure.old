name: Deployment

on:
  pull_request:
    paths:
      - .github/workflows/apply.yml
      - kubernetes/**
      - terraform/**
    types:
      - synchronize
      - opened
      - reopened
  issue_comment:
    types: [ created ]

defaults:
  run:
    shell: bash -eu {0}

jobs:

  setup:
    name: Setup
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      environment: ${{ steps.env.outputs.environment }}
      log_url: ${{ steps.env.outputs.log_url }}
      url: ${{ steps.env.outputs.url }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        if: github.event_name == 'issue_comment'
        id: pr-comment-branch
      - run: |+
          if [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            BRANCH="${{ steps.pr-comment-branch.outputs.head_ref }}"
          elif [[ "${EVENT_NAME}" == "pull_request" ]]; then
            BRANCH="${GITHUB_HEAD_REF}"
          else
            echo "Unsupported event type: ${{ github.event_name }}" >&2
            exit 1
          fi
          echo "::set-output name=branch::${BRANCH}"
        env:
          EVENT_NAME: ${{ github.event_name }}
        id: branch
      - run: |+
          if [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            if [[ "${{github.event.comment.body}}" == "/deploy production" ]]; then
              ENVIRONMENT="production"
              URL="https://kfirs.com"
            else
              echo "Not a deployment comment" >&2
              exit 1 # TODO: is there a way to cancel the job, instead of failing it?
            fi
          elif [[ "${EVENT_NAME}" == "pull_request" ]]; then
            ENVIRONMENT="${BRANCH//\//-}"
            ENVIRONMENT="${BRANCH//./-}"
            ENVIRONMENT="${BRANCH//\?/-}"
            URL="https://${ENVIRONMENT}.kfirs.com"
          else
            echo "Unsupported event: %{EVENT_NAME}" >&2
            exit 1
          fi
          echo "::set-output name=environment::${ENVIRONMENT}"
          echo "::set-output name=log_url::https://github.com/arikkfir/infrastructure/actions/runs/${{github.run_id}}"
          echo "::set-output name=url::${URL}"
        id: env
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
          EVENT_NAME: ${{ github.event_name }}

  plan-terraform-gcp:
    name: Build GCP Terraform plan
    needs: setup
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./terraform/gcp
    env:
      TF_IN_AUTOMATION: true
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
      TF_VAR_gcp_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT_ID }}
      TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_gcp_region: europe-west3
      TF_VAR_gcp_zone: europe-west3-a
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v0
        with:
          service_account: gha-arikkfir-infrastructure@arikkfir.iam.gserviceaccount.com
          credentials_json: ${{ secrets.GCP_SA_GHA_ARIKKFIR_INFRASTRUCTURE_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
      - run: terraform fmt -check -recursive -no-color -diff
        id: fmt
      - run: terraform init -input=false -no-color
      - run: terraform plan -input=false -lock-timeout=180s -no-color -out tfplan
        id: plan
      - run: tar -cvjf ../../terraform.tar.bz2 .terraform* *.tf tfplan
      - uses: actions/upload-artifact@v3
        with:
          name: terraform.tar.bz2
          path: terraform.tar.bz2
          if-no-files-found: error
          retention-days: 1
      - uses: thollander/actions-comment-pull-request@v1
        if: always() && github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |-
            ### Terraform formatting: ${{ steps.fmt.outcome }}
            <details><summary>Expand...</summary>
            
            ```diff
            ${{ steps.fmt.outputs.stdout }}
            ```
            </details>
            
            ### Terraform plan: ${{ steps.plan.outcome }}
            <details><summary>Expand...</summary>
            
            ```HCL
            ${{ steps.plan.outputs.stdout }}
            ```
            </details>
      - uses: peter-evans/commit-comment@v2
        if: always() && github.event_name == 'push'
        with:
          body: |-
            ### Terraform formatting: ${{ steps.fmt.outcome }}
            ```diff
            ${{ steps.fmt.outputs.stdout }}
            ```
            ### Terraform plan: ${{ steps.plan.outcome }}
            ```HCL
            ${{ steps.plan.outputs.stdout }}
            ```

  apply-terraform-gcp:
    name: Apply GCP Terraform plan
    needs: [ setup, plan-terraform-gcp ]
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ needs.setup.outputs.url }}
    runs-on: ubuntu-20.04
    steps:
      - uses: google-github-actions/auth@v0
        with:
          service_account: gha-arikkfir-infrastructure@arikkfir.iam.gserviceaccount.com
          credentials_json: ${{ secrets.GCP_SA_GHA_ARIKKFIR_INFRASTRUCTURE_KEY }}
      - uses: google-github-actions/setup-gcloud@v0
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
      - uses: actions/download-artifact@v3
        with:
          name: terraform.tar.bz2
      - run: tar -xvjf terraform.tar.bz2
      - run: terraform apply -input=false -lock-timeout=180s -auto-approve -no-color tfplan
        id: apply
        env:
          TF_IN_AUTOMATION: true
          TF_VAR_environment: ${{ needs.setup.outputs.environment }}
          TF_VAR_gcp_billing_account: ${{ secrets.GCP_BILLING_ACCOUNT_ID }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: europe-west3
          TF_VAR_gcp_zone: europe-west3-a
      - uses: peter-evans/commit-comment@v2
        with:
          body: |-
            ### Terraform apply: ${{ steps.apply.outcome }}
            ```HCL
            ${{ steps.apply.outputs.stdout }}
            ```
