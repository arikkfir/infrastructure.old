name: Verify PR

on:
  pull_request:
    paths:
      - .github/workflows/deploy.yml
      - "*.tf"
    types:
      - synchronize
      - opened
      - reopened

defaults:
  run:
    shell: bash -euo pipefail {0}

env:
  TERRAFORM_VERSION: 1.3.4
  TF_IN_AUTOMATION: true
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/8909046976/locations/global/workloadIdentityPools/github-actions/providers/default
  GCP_CLI_VERSION: 409.0.0

concurrency:
  group: production
  cancel-in-progress: false

jobs:

  format:
    name: Verify Format
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - run: terraform fmt -check -recursive -diff
        id: fmt
      - uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('#### Format and Style')
            })
            
            const output = `#### Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            <details><summary>Output</summary>
            
            \`\`\`\n
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`
            
            </details>`;
            const req = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            }
            if (botComment) {
              github.rest.issues.updateComment(Object.assign(req, { comment_id: botComment.id }))
            } else {
              github.rest.issues.createComment(Object.assign(req, { issue_number: context.issue.number }))
            }

  plan:
    name: Plan
    needs: format
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_NAME }}
      - uses: google-github-actions/setup-gcloud@v1
        with:
          version: ${{ env.GCP_CLI_VERSION }}
      - run: gcloud info
      - run: terraform init -input=false
      - run: terraform plan -input=false -lock-timeout=180s
        id: plan
        env:
          TF_VAR_gcp_region: europe-west3
          TF_VAR_gcp_zone: europe-west3-a
      - uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('#### Terraform Plan')
            })
            
            const output = `#### Terraform Plan ðŸ–Œ\`${{ steps.plan.outcome }}\`
            <details><summary>Output</summary>
            
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>`;
            const req = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            }
            if (botComment) {
              github.rest.issues.updateComment(Object.assign(req, { comment_id: botComment.id }))
            } else {
              github.rest.issues.createComment(Object.assign(req, { issue_number: context.issue.number }))
            }
