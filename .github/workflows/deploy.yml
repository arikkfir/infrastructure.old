name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/deploy.yml
      - "*.tf"
  workflow_dispatch:

defaults:
  run:
    shell: bash -exuo pipefail {0}

env:
  TERRAFORM_VERSION: 1.4.2
  TF_IN_AUTOMATION: true
  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/8909046976/locations/global/workloadIdentityPools/github-actions/providers/default
  GCP_CLI_VERSION: 409.0.0

concurrency:
  group: production
  cancel-in-progress: false

jobs:

  format:
    name: Verify Format
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - run: terraform fmt -check -recursive -no-color -diff

  plan:
    name: Plan
    needs: format
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_NAME }}
      - uses: google-github-actions/setup-gcloud@v1
        with:
          version: ${{ env.GCP_CLI_VERSION }}
      - run: terraform init -input=false
      - run: terraform plan -input=false -lock-timeout=180s -out tfplan
        id: plan
        env:
          TF_VAR_argocd_delivery_deploy_key: ${{ vars.DELIVERY_REPO_DEPLOY_PUBLIC_KEY }}
      - run: tar -c -j -v -f tfplan.tar.bz2 .terraform .terraform.lock.hcl *.tf tfplan
      - uses: actions/upload-artifact@v3
        with:
          name: plan
          path: tfplan.tar.bz2
          if-no-files-found: error
          retention-days: 1

  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: write
      id-token: write
    environment: production
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: actions/download-artifact@v3
        with:
          name: plan
      - run: tar xjvf tfplan.tar.bz2
      - uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_NAME }}
      - uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: gke-gcloud-auth-plugin
          version: ${{ env.GCP_CLI_VERSION }}
      - run: |
          terraform apply -input=false -lock-timeout=180s -auto-approve tfplan
          echo "gke-cluster-name=$(terraform output -raw gke_cluster_name)" >> $GITHUB_OUTPUT
          echo "gke-cluster-location=$(terraform output -raw gke_cluster_location)" >> $GITHUB_OUTPUT
        id: apply
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ steps.apply.outputs.gke-cluster-name }}
          location: ${{ steps.apply.outputs.gke-cluster-location }}
      - run: |
          for ns in $(kubectl get ns -o=jsonpath='{.items[*].metadata.name}'); do
            for d in $(kubectl get deploy -n ${ns} -ojsonpath='{.items[*].metadata.name}'); do
              kubectl wait -n ${ns} --for=condition=Available=True deployment ${d} --timeout=0
            done
            for d in $(kubectl get statefulset -n ${ns} -ojsonpath='{.items[*].metadata.name}'); do
              REPLICAS=$(kubectl get statefulset -n ${ns} ${d} -ojsonpath='{.status.replicas}')
              AVAILABLE_REPLICAS=$(kubectl get statefulset -n ${ns} ${d} -ojsonpath='{.status.availableReplicas}')
              READY_REPLICAS=$(kubectl get statefulset -n ${ns} ${d} -ojsonpath='{.status.readyReplicas}')
              if [[ ${REPLICAS} -ne ${AVAILABLE_REPLICAS} || ${REPLICAS} -ne ${READY_REPLICAS} ]]; then
                echo "StatefulSet ${ns}/${d} has ${REPLICAS} replicas but only ${AVAILABLE_REPLICAS} available, and ${READY_REPLICAS} ready, replicas"
                sleep 1
                continue
              fi
              echo "statefulsets.apps/${d} is ready (${ns})"
            done
            for d in $(kubectl get daemonset -n ${ns} -ojsonpath='{.items[*].metadata.name}'); do
              CURRENT_SCHEDULED=$(kubectl get daemonset -n ${ns} ${d} -ojsonpath='{.status.currentNumberScheduled}')
              DESIRED_SCHEDULED=$(kubectl get daemonset -n ${ns} ${d} -ojsonpath='{.status.desiredNumberScheduled}')
              if [[ ${CURRENT_SCHEDULED} -ne ${DESIRED_SCHEDULED} ]]; then
                echo "DaemonSet ${ns}/${d} has ${CURRENT_SCHEDULED} replicas but desires ${DESIRED_SCHEDULED} replicas"
                sleep 1
                continue
              fi
              echo "daemonsets.apps/${d} is ready (${ns})"
            done
          done
        timeout-minutes: 10

#      - run: kubectl apply -k ./argocd
#      - run: kubectl config set-context --current --namespace=argocd
#      - run: kubectl wait --for=condition=Available=True --timeout=300s statefulset -l app.kubernetes.io/part-of=argocd
#      - run: kubectl wait --for=condition=Available=True --timeout=300s deployment -l app.kubernetes.io/part-of=argocd
#      - run: kubectl wait --for=condition=Available=True --timeout=300s deployment -l app.kubernetes.io/part-of=argocd-applicationset
#      - run: |
#          if [[ $(kubectl get secret | grep argocd-initial-admin-secret | wc -l | tr -d ' ') == "1" ]]; then
#            argocd --port-forward admin initial-password -n argocd > argocd-password.txt
#            cat argocd-password.txt | argocd --port-forward login --username admin --password - --insecure
#            cat argocd-password.txt | argocd account update-password --current-password - --new-password "${ARGOCD_PASSWORD}"
#            kubectl delete secret argocd-initial-admin-secret
#          fi
#        env:
#          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
