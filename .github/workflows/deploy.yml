name: Deploy

on:
  pull_request:
    paths:
      - .github/workflows/deploy.yml
      - "*.tf"
    types:
      - synchronize
      - opened
      - reopened

defaults:
  run:
    shell: bash -euo pipefail {0}

env:
  GCP_REGION: europe-west3
  GCP_ZONE: europe-west3-a
  TERRAFORM_VERSION: 1.1.7
  TF_IN_AUTOMATION: true
  TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_gcp_region: europe-west3
  TF_VAR_gcp_zone: europe-west3-a

jobs:

  format:
    name: Terraform Format Verification
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - run: terraform fmt -check -recursive -no-color -diff
        id: fmt
      - uses: marocchino/sticky-pull-request-comment@v2
        if: steps.fmt.outcome == 'success'
        with:
          header: fmt
          message: |-
            üëèüëç Terraform formatting is valid!
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: marocchino/sticky-pull-request-comment@v2
        if: failure() && steps.fmt.outcome == 'failure'
        with:
          header: fmt
          message: |-
            ‚ùóTerraform format is invalid!
            ```HCL
            ${{ steps.fmt.outputs.stderr }}
            ${{ steps.fmt.outputs.stdout }}
            ```
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  plan:
#    name: Terraform Format Verification
#    needs: [format]
#    runs-on: ubuntu-20.04
#    timeout-minutes: 5
#    steps:
#      - uses: actions/checkout@v3
#      - uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: ${{ env.TERRAFORM_VERSION }}
#      - uses: google-github-actions/auth@v0
#        with:
#          service_account: ${{ secrets.GCP_SA_NAME }}
#          credentials_json: ${{ secrets.GCP_SA_KEY }}
#      - uses: google-github-actions/setup-gcloud@v0
#      - run: terraform init -input=false -no-color
#        id: init
#      - run: terraform plan -input=false -lock-timeout=180s -no-color -out tfplan
#        id: plan
#      - run: |+
#          tar -c -j -v -f tfplan.tar.bz2 .terraform .terraform.lock.hcl *.tf tfplan
#        working-directory: cloud-provider
#      - uses: actions/upload-artifact@v3
#        with:
#          name: tf-plan
#          path: cloud-provider/tfplan.tar.bz2
#          if-no-files-found: error
#          retention-days: 7
#      - uses: marocchino/sticky-pull-request-comment@v2
#        if: steps.fmt.outcome == 'success'
#        with:
#          header: fmt
#          recreate: true
#          message: |-
#            üëèüëç Terraform formatting is valid!
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - uses: marocchino/sticky-pull-request-comment@v2
#        if: steps.fmt.outcome == 'failure'
#        with:
#          header: fmt
#          recreate: true
#          message: |-
#            ‚ùóTerraform format is invalid! (${{ steps.fmt.outcome }})
#            ```HCL
#            ${{ steps.fmt.outputs.stderr }}
#            ```
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
